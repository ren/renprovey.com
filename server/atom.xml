<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Ren Provey</title>
 <link href="http://renprovey.com/atom.xml" rel="self"/>
 <link href="http://renprovey.com/"/>
 <updated>2010-09-29T16:15:00-04:00</updated>
 <id>http://renprovey.com/</id>
 <author>
   <name>Ren Provey</name>
   <email>ren@renprovey.com</email>
 </author>

 
 <entry>
   <title>Git Odds and Ends</title>
   <link href="http://renprovey.com/git/2010/07/13/git-odds-and-ends"/>
   <updated>2010-07-13T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/07/13/git-odds-and-ends</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Git Odds and Ends&lt;/h1&gt;

  &lt;p&gt;
  	&lt;code&gt;$ git gc&lt;/code&gt; &amp;mdash; Internally optimizes the way Git stores its history, the &lt;code&gt;--aggressive&lt;/code&gt; parameter takes things one step further by recalculating the deltas from scratch.&lt;br/&gt;
  	&lt;code&gt;$ git gc&lt;/code&gt; &amp;mdash; Internally optimizes the way Git stores its history, the --aggressive parameter takes things one step further by recalculating the deltas from scratch.&lt;br/&gt;
		&lt;code&gt;$ git archive --format=&amp;lt;zip or tar&amp;gt; --prefix=&amp;lt;prefix&amp;gt;/ HEAD &gt; filename.zip&lt;/code&gt; &amp;mdash; Valid format types are tar and zip.&lt;br/&gt;
		&lt;code&gt;$ git archive --format=tar --prefix=&amp;lt;prefix&amp;gt;/ &amp;lt;HEAD, commit hash, branch, or tag&amp;gt; | gzip &gt; filename.tar.gz&lt;/code&gt; &amp;mdash; Pipe into gzip&lt;br/&gt;
  &lt;/p&gt;

  &lt;a href=&quot;/git/2010/07/13/git-odds-and-ends&quot; class=&quot;permalink&quot;&gt;July 13 2010&lt;/a&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Submodules</title>
   <link href="http://renprovey.com/git/2010/07/12/git-submodule"/>
   <updated>2010-07-12T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/07/12/git-submodule</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Git Submodule&lt;/h1&gt;

  &lt;p&gt;
  	&lt;code&gt;$ git submodule&lt;/code&gt; &amp;mdash; List your submodules, a - before the hash indicates the submodule is not initialized&lt;br/&gt;
		&lt;code&gt;$ git submodule add &amp;lt;git repository&amp;gt; &amp;lt;target directory&amp;gt;&lt;/code&gt; &amp;mdash; Let your project know about the submodule and where it will go&lt;br/&gt;
		&lt;code&gt;$ git submodule init &amp;lt;target directory&amp;gt;&lt;/code&gt; &amp;mdash; Initialize the submodule (this will add an entry to your .git/config file)&lt;br/&gt;
		&lt;code&gt;$ git submodule update &amp;lt;target directory&amp;gt;&lt;/code&gt; &amp;mdash; Pull in the contents of the submodule.  This command is destructive.&lt;br/&gt;
  &lt;/p&gt;  

  &lt;p&gt;The trick here is that a Git Submodule only tracks the revision from when it was added, not the latest version of whatever that submodule contains. To update a submodule:&lt;br/&gt;&lt;br/&gt;
    &lt;code&gt;$ cd &amp;lt;target directory&amp;gt;&lt;/code&gt;&lt;br/&gt;
    &lt;code&gt;$ git checkout HEAD&lt;/code&gt; &amp;mdash; The can be any revision, not necessarily HEAD.&lt;br/&gt;
    &lt;code&gt;$ git add &amp;lt;target directory&amp;gt;&lt;/code&gt;&lt;br/&gt;
    &lt;code&gt;$ git commit -m &quot;UPDATED: Submodule...&quot;&lt;/code&gt;&lt;br/&gt;
    
    &lt;/p&gt;

  &lt;a href=&quot;/git/2010/07/12/git-submodule&quot; class=&quot;permalink&quot;&gt;July 12 2010&lt;/a&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Rebase</title>
   <link href="http://renprovey.com/git/2010/07/08/git-rebase"/>
   <updated>2010-07-08T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/07/08/git-rebase</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Git Rebase&lt;/h1&gt;

  &lt;p&gt;
    &lt;code&gt;$ git rebase -i HEAD~5&lt;/code&gt; &amp;mdash; Interactive rebase of the last 5 commits.  The sweet thing here is you can clean up a commit history.  You can also pass in a tag or hash range.&lt;br/&gt;
		&lt;code&gt;$ git rebase --continue&lt;/code&gt; &amp;mdash; If you have to drop out of the rebase to resolve a conflict, after you add the merged file(s), this is how to start it up again.&lt;br/&gt;
		&lt;code&gt;$ git rebase --abort&lt;/code&gt; &amp;mdash; Forget this.
  &lt;/p&gt;  

  &lt;a href=&quot;/git/2010/07/08/git-rebase&quot; class=&quot;permalink&quot;&gt;July 08 2010&lt;/a&gt;
&lt;/section&gt;



</content>
 </entry>
 
 <entry>
   <title>Git Blame</title>
   <link href="http://renprovey.com/git/2010/06/24/git-blame"/>
   <updated>2010-06-24T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/06/24/git-blame</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Git Blame&lt;/h1&gt;
  &lt;p&gt;
    &lt;code&gt;$ git blame -L start_line,end_line file&lt;/code&gt; &amp;mdash; &lt;br/&gt;
    &lt;code&gt;$ git blame -L start_line,+5 file&lt;/code&gt; &amp;mdash; you can specify prev / more lines&lt;br/&gt;
    &lt;code&gt;$ git blame -L &quot;/regex/&quot;,+5 file&lt;/code&gt; &amp;mdash; you can use regex, you can optionally pass in a commit hash id before the file name
  &lt;/p&gt;
  
  &lt;h1&gt;Git Revert&lt;/h1&gt;
  &lt;p&gt;
    &lt;code&gt;$ git revert &lt;/code&gt; &amp;mdash; rolls back the previous commit, committing immediately&lt;br/&gt;
    &lt;code&gt;$ git revert -n HEAD&lt;/code&gt; &amp;mdash; roll back without committing&lt;br/&gt;
    &lt;code&gt;$ git blame -L &quot;/regex/&quot;,+5 file&lt;/code&gt; &amp;mdash; you can use regex, you can optionally pass in a commit hash id before the file name
  &lt;/p&gt;
  
  &lt;a href=&quot;/git/2010/06/24/git-blame&quot; class=&quot;permalink&quot;&gt;June 24 2010&lt;/a&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Started with Jekyll</title>
   <link href="http://renprovey.com/jekyll/2010/06/23/getting-started-with-jekyll"/>
   <updated>2010-06-23T00:00:00-04:00</updated>
   <id>http://renprovey.com/jekyll/2010/06/23/getting-started-with-jekyll</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Getting Started with Jekyll&lt;/h1&gt;
  &lt;p&gt;In rebuilding this site I made the move to &lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, an excellent static site generator.  Everything went swimmingly when I found what I was looking for, but the finding seemed a bit more difficult than I expected.  Maybe I missed a key resource, but I'll outline what I did to hopefully save someone a bit of time. You can also &lt;a href=&quot;http://github.com/ren/renprovey.com&quot;&gt;browse this site's repository&lt;/a&gt; and &lt;a href=&quot;http://wiki.github.com/mojombo/jekyll/sites&quot;&gt;others&lt;/a&gt; for more examples.&lt;/p&gt;

  &lt;h2&gt;Getting Started&lt;/h2&gt;
  &lt;p&gt;A few things to note, Jekyll gives the following special consideration:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;_config.yml&lt;/code&gt; &amp;mdash; file, stores site settings, you can see mine &lt;a href=&quot;http://github.com/ren/renprovey.com/blob/master/_config.yml&quot;&gt;here&lt;/a&gt;, and all options in the &lt;a href=&quot;http://wiki.github.com/mojombo/jekyll/configuration&quot;&gt;wiki&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;_site&lt;/code&gt; &amp;mdash; by default this is where Jekyll generates the static version of the site, you can override this in the _config.yml&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;_posts&lt;/code&gt; &amp;mdash; directory, where Jekyll looks here for blog posts&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;_layouts&lt;/code&gt; &amp;mdash; directory, contains your layout files. &lt;/li&gt;
      &lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123;content&amp;#125;&amp;#125;&lt;/code&gt; tag in the layout is where the main body of content from your individual pages will be inserted.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/p&gt;

  &lt;h2&gt;Page Settings&lt;/h2&gt;
  &lt;p&gt;At the top of each page you'll see the bits of information Jekyll uses when constructing the site, here is a sample for one of my blog posts:&lt;/p&gt;

  &lt;code class=&quot;block&quot;&gt;
  ---&lt;br/&gt;
  layout: default&lt;br/&gt;
  title: Git&lt;br/&gt;
  categories: jekyll&lt;br/&gt;
  published: true&lt;br/&gt;
  ---
  &lt;/code&gt;

  &lt;p&gt;These should be self explanatory, but lets run through them real quick:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;layout&lt;/code&gt; should correspond to a file in _layouts and is required for any file that is going to be generated using a template,&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;title&lt;/code&gt; blog post title,&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;categories&lt;/code&gt; blog post categories,&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;published&lt;/code&gt; a boolean, regarding weather to publish the post.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/p&gt;

  &lt;p&gt;You can also add custom attributes here, which you can call from the template using &amp;#123;&amp;#123;page.attribute_name&amp;#125;&amp;#125;&lt;/p&gt;

  &lt;h2&gt;Iterating Over Posts&lt;/h2&gt;

  &lt;p&gt;In my &lt;a href=&quot;http://github.com/ren/renprovey.com/blob/master/index.html&quot;&gt;index.html&lt;/a&gt; file, I have:&lt;/p&gt;

  &lt;code class=&quot;block&quot;&gt;
    &amp;#123;% for post in site.posts limit:5 %&amp;#125;&lt;br/&gt;
    &amp;#123;&amp;#123; post.content &amp;#125;&amp;#125;&lt;br/&gt;
    &amp;#123;% endfor %&amp;#125;
  &lt;/code&gt;

  &lt;p&gt;You can add more advanced options in the &lt;a href=&quot;http://wiki.github.com/mojombo/jekyll/template-data&quot;&gt;wiki&lt;/a&gt;. See the Pagination along with the Post sections for respective information.&lt;/p&gt;

  &lt;h2&gt;Setting Your Permalink Style&lt;/h2&gt;
  &lt;p&gt;You'll on the bottom of each of &lt;a href=&quot;http://github.com/ren/renprovey.com/tree/master/_posts/&quot;&gt;my post pages&lt;/a&gt;, you'll notice a call to {post.url}.  This is generated form a combination of two factors.  Jekyll can parse the date of the post from its file name, you'll notice anything in my _posts directory is named in the DD-MM-YYYY-post_title.html format. In my &lt;a href=&quot;http://github.com/ren/renprovey.com/blob/master/_config.yml&quot;&gt;_config.yml&lt;/a&gt; file you'll see a line similar to:&lt;br/&gt;
    &lt;code class=&quot;block&quot;&gt;permalink: /blog/:year/:month/:day/:title&lt;/code&gt;
  &lt;/p&gt;

  &lt;p&gt;Jekyll will parse this information out of the filename when creating the permalinks and blog directory.&lt;/p&gt;

  &lt;h2&gt;Other Resources:&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;Jekyll on GitHub&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://wiki.github.com/mojombo/jekyll&quot;&gt;Jekyll Wiki&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;a href=&quot;/jekyll/2010/06/23/getting-started-with-jekyll&quot; class=&quot;permalink&quot;&gt;June 23 2010&lt;/a&gt;
&lt;/section&gt;</content>
 </entry>
 
 <entry>
   <title>Git Log</title>
   <link href="http://renprovey.com/git/2010/06/22/git-log"/>
   <updated>2010-06-22T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/06/22/git-log</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Git Log&lt;/h1&gt;

  &lt;p&gt;
    &lt;code&gt;$ git log --since=&quot;5 hours&quot;&lt;/code&gt; &amp;mdash; commits in the last 5 hours&lt;br/&gt;
    &lt;code&gt;$ git log --before=&quot;5 hours&quot;&lt;/code&gt; &amp;mdash; without commits from the last 5 hours&lt;br/&gt;
    &lt;code&gt;$ git log &amp;lt;commit marker&amp;gt;..&amp;lt;commit marker&amp;gt;&lt;/code&gt; &amp;mdash; log for a commit range&lt;br/&gt;
    &lt;code&gt;$ git log &amp;lt;commit marker&amp;gt;^&lt;/code&gt; &amp;mdash; a caret acts like a minus one, you can use multiple carets.&lt;br/&gt;
    &lt;code&gt;$ git log &amp;lt;commit marker&amp;gt;~2&lt;/code&gt; &amp;mdash; two revisions prior to what the hash or tag specifies.&lt;br/&gt;
    &lt;code&gt;$ git log --pretty=oneline &amp;lt;commit marker&amp;gt;..&amp;lt;commit marker&amp;gt;&lt;/code&gt; &amp;mdash; a nice way to tighten up the log output.
  &lt;/p&gt;  
  
  &lt;a href=&quot;/git/2010/06/22/git-log&quot; class=&quot;permalink&quot;&gt;June 22 2010&lt;/a&gt;
&lt;/section&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Diff</title>
   <link href="http://renprovey.com/git/2010/06/21/git-diff"/>
   <updated>2010-06-21T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/06/21/git-diff</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Git Diff&lt;/h1&gt;

  &lt;p&gt;
    &lt;code&gt;$ git diff&lt;/code&gt; &amp;mdash; working tree v. staging area&lt;br/&gt;
    &lt;code&gt;$ git diff --cached&lt;/code&gt; &amp;mdash; staging area v. repo&lt;br/&gt;
    &lt;code&gt;$ git diff HEAD&lt;/code&gt; &amp;mdash; tree, staging area v. HEAD
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;$ git diff --stat &amp;lt;commit marker&amp;gt; &amp;lt;commit marker&amp;gt;&lt;/code&gt; &amp;mdash; Amount of code that has been changed since a tag or hash.
  &lt;/p&gt;

  &lt;a href=&quot;/git/2010/06/21/git-diff&quot; class=&quot;permalink&quot;&gt;June 21 2010&lt;/a&gt;
&lt;/section&gt;</content>
 </entry>
 
 <entry>
   <title>Ignore Files in Git</title>
   <link href="http://renprovey.com/git/2010/06/20/ignore-files-in-git"/>
   <updated>2010-06-20T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/06/20/ignore-files-in-git</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Ignoring Files in Git&lt;/h1&gt;

  &lt;p&gt;
    &lt;code&gt;.gitignore&lt;/code&gt; &amp;mdash; repo level ignore.&lt;br/&gt;
    &lt;code&gt;&amp;lt;repo&amp;gt;/.git/info/exclude&lt;/code&gt; &amp;mdash; local ignore.
  &lt;/p&gt;

  &lt;a href=&quot;/git/2010/06/20/ignore-files-in-git&quot; class=&quot;permalink&quot;&gt;June 20 2010&lt;/a&gt;
&lt;/section&gt;

</content>
 </entry>
 
 <entry>
   <title>Git Branches</title>
   <link href="http://renprovey.com/git/2010/06/19/git-branches"/>
   <updated>2010-06-19T00:00:00-04:00</updated>
   <id>http://renprovey.com/git/2010/06/19/git-branches</id>
   <content type="html">&lt;section class=&quot;callout&quot;&gt;
  &lt;h1&gt;Git Branches&lt;/h1&gt;
  &lt;code&gt;git checkout -b &amp;lt;new branch&amp;gt;&lt;/code&gt; &amp;mdash; create and switch to.&lt;br/&gt;
  &lt;code&gt;git branch -m &amp;lt;current branch&amp;gt; &amp;lt;new branch&amp;gt;&lt;/code&gt; &amp;mdash; move branch.&lt;br/&gt;
  &lt;code&gt;git branch -d &amp;lt;branch&amp;gt;&lt;/code&gt; &amp;mdash; delete branch.&lt;br/&gt;
  
  &lt;a href=&quot;/git/2010/06/19/git-branches&quot; class=&quot;permalink&quot;&gt;June 19 2010&lt;/a&gt;
&lt;/section&gt;</content>
 </entry>
 
 
</feed>